// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../libs/docs/src/db"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./"
  outputName = "schema.dbml"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Hiring Guru"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model with authentication details
model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  githubUsername String?
  name           String?
  avatar         String?

  authProvider   String // 'google', 'github'
  authProviderId String
  isActive       Boolean @default(true)
  isCompleted    Boolean @default(false)

  // User's custom assessment templates
  customAssessments CustomAssessment[]

  // User's hiring process attempts
  hiringProcesses HiringProcess[]
  userAnalysis    UserAnalysis[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Predefined assessment templates (like Amazon SDE-1, Google SWE, etc.)
model PredefinedAssessment {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique // "Amazon - SDE 1", "Google - Software Engineer", etc.
  description String?
  difficulty  DifficultyLevel // EASY, MEDIUM, HARD
  isActive    Boolean         @default(true)
  isPrime     Boolean         @default(false) // Premium assessments

  // Total duration and round count
  totalDuration Int // Total time in minutes
  roundCount    Int // Number of rounds

  // Round configuration for this assessment
  rounds PredefinedRound[]

  // Hiring processes using this template
  hiringProcesses HiringProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("predefined_assessments")
}

model UserAnalysis {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Input Data (from GitHub APIs)
  skills           String[] // Array of programming languages, frameworks, etc.
  contributionFreq String // "high", "medium", "low" or specific metrics
  projectsCount    Int // Number of repositories/projects

  // Additional GitHub metrics (optional)
  topLanguages    Json? // {language: percentage} mapping
  recentActivity  Json? // Recent commits, PRs, etc.
  repositoryStats Json? // Stars, forks, etc.

  // AI Generated Results
  targetRole     String // Recommended job role
  dreamCompanies String[] // Array of recommended companies

  // Additional AI insights (optional)
  confidenceScore Float? // AI confidence in recommendations
  reasoning       String? // Why these recommendations were made
  skillGaps       String[] // Skills to improve
  careerPath      String[] // Suggested career progression

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("analyses")
}

// Rounds within predefined assessments
model PredefinedRound {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Assessment this round belongs to
  assessmentId String               @db.ObjectId
  assessment   PredefinedAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  // Round details
  roundType   RoundType
  name        String // "Screening Round", "Coding Challenge", etc.
  description String?
  duration    Int // Duration in minutes
  sequence    Int // Order of rounds (1, 2, 3...)

  // Round configuration
  config Json? // Flexible config for different round types

  // Actual rounds created from this template
  rounds Round[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("predefined_rounds")
}

// Custom assessment templates created by users
model CustomAssessment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User who created this custom assessment
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String // "Frontend Developer Practice", "Full Stack Challenge", etc.
  description String?
  difficulty  DifficultyLevel

  // Total duration and round count (calculated from rounds)
  totalDuration Int // Total time in minutes
  roundCount    Int // Number of rounds

  // Custom round configuration
  rounds CustomRound[]

  // Hiring processes using this template
  hiringProcesses HiringProcess[]

  // Template metadata
  isTemplate Boolean @default(true) // Can be used as template for new processes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_assessments")
}

// Rounds within custom assessments
model CustomRound {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Assessment this round belongs to
  assessmentId String           @db.ObjectId
  assessment   CustomAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  // Round details
  roundType   RoundType
  name        String // Custom name given by user
  description String?
  duration    Int // Duration in minutes
  sequence    Int // Order of rounds (1, 2, 3...)

  // Round configuration
  config Json? // Flexible config for different round types

  // Actual rounds created from this template
  rounds Round[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_rounds")
}

// Hiring process instance (actual attempt by user)
model HiringProcess {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User taking this process
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Assessment type - either predefined or custom
  assessmentType AssessmentType // PREDEFINED or CUSTOM

  // Reference to predefined assessment (if using predefined)
  predefinedAssessmentId String?               @db.ObjectId
  predefinedAssessment   PredefinedAssessment? @relation(fields: [predefinedAssessmentId], references: [id])

  // Reference to custom assessment (if using custom)
  customAssessmentId String?           @db.ObjectId
  customAssessment   CustomAssessment? @relation(fields: [customAssessmentId], references: [id])

  // Process status and progress
  status       ProcessStatus @default(NOT_STARTED)
  currentRound Int           @default(1)
  isCompleted  Boolean       @default(false)

  // Configuration lock - once started, configuration cannot be changed
  isLocked Boolean   @default(false)
  lockedAt DateTime? // When the process was locked

  // Frozen configuration snapshot (taken when process starts)
  configSnapshot Json? // Snapshot of the assessment configuration

  // Rounds in this process (copied from template when process starts)
  rounds Round[]

  // Final assessment
  finalAssessment FinalAssessment?

  // Timestamps
  startedAt   DateTime? // When first round was started
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("hiring_processes")
}

// Individual round instance in a hiring process
model Round {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Process this round belongs to
  hiringProcessId String        @db.ObjectId
  hiringProcess   HiringProcess @relation(fields: [hiringProcessId], references: [id], onDelete: Cascade)

  // Template reference (either predefined or custom)
  predefinedRoundId String?          @db.ObjectId
  predefinedRound   PredefinedRound? @relation(fields: [predefinedRoundId], references: [id])

  customRoundId String?      @db.ObjectId
  customRound   CustomRound? @relation(fields: [customRoundId], references: [id])

  // Round details (copied from template when process starts)
  roundType   RoundType
  name        String
  description String?
  sequence    Int // Order in the process
  duration    Int // Time limit in minutes

  // Round status and timing
  status      RoundStatus @default(NOT_STARTED)
  timeSpent   Int? // Actual time spent in minutes
  startedAt   DateTime?
  completedAt DateTime?

  // Preparation phase
  preparationSkipped Boolean @default(false)
  preparationTime    Int? // Time spent in preparation

  // Questions and responses
  questions Question[]
  responses Response[]

  // AI interview specific
  interviewData InterviewData?

  // Coding round specific  
  codingSubmissions CodingSubmission[]

  // Feedback and assessment
  feedback RoundFeedback?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rounds")
}

// Questions generated for a round
model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Round this question belongs to
  roundId String @db.ObjectId
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  // Question details
  content    String
  type       QuestionType // "MCQ", "SUBJECTIVE", "CODING", "BEHAVIORAL"
  difficulty String // "easy", "medium", "hard"
  category   String? // "algorithms", "system-design", etc.

  // For MCQ questions
  options       String[]
  correctAnswer String?

  // For coding questions
  constraints String?
  examples    Json?
  testCases   Json?

  // AI generation metadata
  generatedBy String // "openai", "claude", etc.
  prompt      String? // Original prompt used

  // Responses to this question
  responses Response[]

  createdAt DateTime @default(now())

  @@map("questions")
}

// User responses to questions
model Response {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Question this response is for
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Round this response belongs to
  roundId String @db.ObjectId
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  // Response content
  content   String
  isCorrect Boolean? // For questions with definitive answers
  score     Float? // AI generated score

  // Timing
  timeSpent   Int? // in seconds
  submittedAt DateTime @default(now())

  @@map("responses")
}

// AI Interview specific data
model InterviewData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Round this interview belongs to
  roundId String @unique @db.ObjectId
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  // Interview session details
  sessionId String @unique
  authToken String // For backend model connection

  // Conversation data
  transcript     Json // Full conversation transcript
  audioRecording String? // URL to audio file if recorded

  // Analysis results
  sentimentAnalysis  Json?
  confidenceScore    Float?
  communicationScore Float?
  technicalScore     Float?

  // Connection metadata
  modelBackend   String // Which AI model was used
  connectionLogs Json? // Connection/disconnection logs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interview_data")
}

// Coding submissions
model CodingSubmission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Round this submission belongs to
  roundId String @db.ObjectId
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  // Question this submission is for
  questionId String @db.ObjectId

  // Submission details
  code     String
  language String // "javascript", "python", "java", etc.

  // Judge0 evaluation results
  judge0Token   String? // Judge0 submission token
  status        String? // "Accepted", "Wrong Answer", "Time Limit Exceeded", etc.
  executionTime Float? // in seconds
  memoryUsed    Int? // in KB

  // Test case results
  testResults Json // Results from all test cases
  score       Float? // Overall score

  // Timestamps
  submittedAt DateTime  @default(now())
  evaluatedAt DateTime?

  @@map("coding_submissions")
}

// Feedback for each round
model RoundFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Round this feedback is for
  roundId String @unique @db.ObjectId
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  // Scores (0-100)
  overallScore        Float
  technicalScore      Float?
  communicationScore  Float?
  problemSolvingScore Float?

  // Feedback content
  strengths        String[]
  improvements     String[]
  detailedFeedback String

  // Eligibility assessment
  eligibleForNext   Boolean
  recommendedAction String // "proceed", "retry", "additional_preparation"

  // AI generation metadata
  generatedBy String // Which AI model generated this
  confidence  Float? // AI's confidence in the assessment

  createdAt DateTime @default(now())

  @@map("round_feedback")
}

// Final assessment after completing all rounds
model FinalAssessment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Process this assessment is for
  hiringProcessId String        @unique @db.ObjectId
  hiringProcess   HiringProcess @relation(fields: [hiringProcessId], references: [id], onDelete: Cascade)

  // Overall scores
  overallScore        Float // 0-100
  technicalScore      Float
  communicationScore  Float
  problemSolvingScore Float

  // Performance analysis
  strongAreas      String[]
  improvementAreas String[]

  // Comprehensive report
  executiveSummary String
  detailedAnalysis String
  recommendations  String[]

  // Hiring decision simulation
  hiringDecision     String // "hire", "maybe", "no_hire"
  reasonsForDecision String[]

  // Comparison with industry standards
  industryPercentile Float? // Where user stands compared to others

  createdAt DateTime @default(now())

  @@map("final_assessments")
}

// Enums
enum AssessmentType {
  PREDEFINED
  CUSTOM
}

enum ProcessStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum RoundStatus {
  NOT_STARTED
  IN_PREPARATION
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum RoundType {
  SCREENING
  APTITUDE
  COMMUNICATION
  CODING
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
}

enum QuestionType {
  MCQ
  SUBJECTIVE
  CODING
  BEHAVIORAL
  SYSTEM_DESIGN
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}
